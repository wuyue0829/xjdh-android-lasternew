//
// DO NOT EDIT THIS FILE.Generated using AndroidAnnotations 3.3.1.
//  You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package com.chinatelecom.xjdh.view;

import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import com.chinatelecom.xjdh.R.id;
import com.chinatelecom.xjdh.R.layout;
import com.chinatelecom.xjdh.rest.client.ApiRestClientInterface_;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;


/**
 * We use @SuppressWarning here because our java code
 * generator doesn't know that there is no need
 * to import OnXXXListeners from View as we already
 * are in a View.
 * 
 */
@SuppressWarnings("unused")
public final class DoorView_
    extends DoorView
    implements HasViews, OnViewChangedListener
{

    private boolean alreadyInflated_ = false;
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private Handler handler_ = new Handler(Looper.getMainLooper());

    public DoorView_(Context context) {
        super(context);
        init_();
    }

    public static DoorView build(Context context) {
        DoorView_ instance = new DoorView_(context);
        instance.onFinishInflate();
        return instance;
    }

    /**
     * The mAlreadyInflated_ hack is needed because of an Android bug
     * which leads to infinite calls of onFinishInflate()
     * when inflating a layout with a parent and using
     * the <merge /> tag.
     * 
     */
    @Override
    public void onFinishInflate() {
        if (!alreadyInflated_) {
            alreadyInflated_ = true;
            inflate(getContext(), layout.door_view, this);
            onViewChangedNotifier_.notifyViewChanged(this);
        }
        super.onFinishInflate();
    }

    private void init_() {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        mApiClient = new ApiRestClientInterface_(getContext());
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        tvStatus = ((TextView) hasViews.findViewById(id.tvStatus));
        tvName = ((TextView) hasViews.findViewById(id.tvName));
        btnRemoteOpen = ((Button) hasViews.findViewById(id.btnRemoteOpen));
        btnForceOpen = ((Button) hasViews.findViewById(id.btnForceOpen));
        if (btnRemoteOpen!= null) {
            btnRemoteOpen.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    DoorView_.this.OnRemoteOpen();
                }

            }
            );
        }
        if (btnForceOpen!= null) {
            btnForceOpen.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    DoorView_.this.OnForceOpen();
                }

            }
            );
        }
    }

    @Override
    public void ShowStatus(final String status) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DoorView_.super.ShowStatus(status);
            }

        }
        );
    }

    @Override
    public void ShowResult(final int Ret) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DoorView_.super.ShowResult(Ret);
            }

        }
        );
    }

    @Override
    public void doOpenDoor(final String action, final String message) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    DoorView_.super.doOpenDoor(action, message);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

}
