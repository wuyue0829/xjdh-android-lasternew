//
// DO NOT EDIT THIS FILE.Generated using AndroidAnnotations 3.3.1.
//  You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package com.chinatelecom.xjdh.rest.client;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import android.content.Context;
import com.chinatelecom.xjdh.bean.ApiResponse;
import com.chinatelecom.xjdh.bean.LoginResponse;
import com.chinatelecom.xjdh.bean.OauthParam;
import com.chinatelecom.xjdh.rest.interceptor.HttpBasicAuthenticatorInterceptor_;
import org.springframework.http.HttpAuthentication;
import org.springframework.http.HttpBasicAuthentication;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.converter.ByteArrayHttpMessageConverter;
import org.springframework.http.converter.FormHttpMessageConverter;
import org.springframework.http.converter.ResourceHttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;
import org.springframework.web.client.RestTemplate;

public final class OauthRestClientInterface_
    implements OauthRestClientInterface
{

    private HttpAuthentication authentication;
    private HashMap<String, String> availableCookies;
    private HashMap<String, String> availableHeaders;
    private String rootUrl;
    private RestTemplate restTemplate;

    public OauthRestClientInterface_(Context context) {
        availableCookies = new HashMap<String, String>();
        availableHeaders = new HashMap<String, String>();
        rootUrl = "http://yj.jimglobal.com/oauth2";
        restTemplate = new RestTemplate();
        restTemplate.getMessageConverters().clear();
        restTemplate.getMessageConverters().add(new MappingJacksonHttpMessageConverter());
        restTemplate.getMessageConverters().add(new StringHttpMessageConverter());
        restTemplate.getMessageConverters().add(new MyFormHttpMessageConverter());
        restTemplate.getMessageConverters().add(new MyStringHttpMessageConverter());
        restTemplate.getMessageConverters().add(new ResourceHttpMessageConverter());
        restTemplate.getMessageConverters().add(new FormHttpMessageConverter());
        restTemplate.getMessageConverters().add(new ByteArrayHttpMessageConverter());
        restTemplate.setInterceptors(new ArrayList<ClientHttpRequestInterceptor>());
        restTemplate.getInterceptors().add(HttpBasicAuthenticatorInterceptor_.getInstance_(context));
    }

    @Override
    public void setHttpBasicAuth(String arg0, String arg1) {
        this.authentication = new HttpBasicAuthentication(arg0, arg1);
    }

    @Override
    public void setBearerAuth(final String arg0) {
        this.authentication = new HttpAuthentication() {


            @Override
            public String getHeaderValue() {
                return ("Bearer "+ arg0);
            }

        }
        ;
    }

    @Override
    public void setAuthentication(HttpAuthentication arg0) {
        this.authentication = arg0;
    }

    @Override
    public String getCookie(String arg0) {
        return availableCookies.get(arg0);
    }

    @Override
    public String getHeader(String arg0) {
        return availableHeaders.get(arg0);
    }

    @Override
    public void setCookie(String arg0, String arg1) {
        availableCookies.put(arg0, arg1);
    }

    @Override
    public void setHeader(String arg0, String arg1) {
        availableHeaders.put(arg0, arg1);
    }

    @Override
    public LoginResponse login(OauthParam param) {
        {
            HttpEntity<OauthParam> requestEntity = new HttpEntity<OauthParam>(param);
            return restTemplate.exchange(rootUrl.concat("/authenticate"), HttpMethod.POST, requestEntity, LoginResponse.class).getBody();
        }
    }

    @Override
    public ApiResponse creationUser(LinkedHashMap<String, String> items) {
        {
            HttpEntity<LinkedHashMap<String, String>> requestEntity = new HttpEntity<LinkedHashMap<String, String>>(items);
            return restTemplate.exchange(rootUrl.concat("/authenticate"), HttpMethod.POST, requestEntity, ApiResponse.class).getBody();
        }
    }

}
