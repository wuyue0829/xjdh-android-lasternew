//
// DO NOT EDIT THIS FILE.Generated using AndroidAnnotations 3.3.1.
//  You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package com.chinatelecom.xjdh.rest.client;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import android.content.Context;
import com.chinatelecom.xjdh.bean.ApiResponse;
import com.chinatelecom.xjdh.bean.ApiResponseImage;
import com.chinatelecom.xjdh.bean.ApiResponseUpLoad;
import com.chinatelecom.xjdh.bean.ApiResponseUrl;
import com.chinatelecom.xjdh.bean.DoorOperation;
import com.chinatelecom.xjdh.bean.JsonResponse;
import com.chinatelecom.xjdh.bean.SPDevResponse;
import com.chinatelecom.xjdh.rest.interceptor.HttpBasicAuthenticatorInterceptor_;
import com.chinatelecom.xjdh.utils.Update;
import org.springframework.http.HttpAuthentication;
import org.springframework.http.HttpBasicAuthentication;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.converter.ByteArrayHttpMessageConverter;
import org.springframework.http.converter.FormHttpMessageConverter;
import org.springframework.http.converter.ResourceHttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJacksonHttpMessageConverter;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

public final class ApiRestClientInterface_
    implements ApiRestClientInterface
{

    private HttpAuthentication authentication;
    private HashMap<String, String> availableCookies;
    private HashMap<String, String> availableHeaders;
    private String rootUrl;
    private RestTemplate restTemplate;

    public ApiRestClientInterface_(Context context) {
        availableCookies = new HashMap<String, String>();
        availableHeaders = new HashMap<String, String>();
        rootUrl = "http://yj.jimglobal.com/api/v1";
        restTemplate = new RestTemplate();
        restTemplate.getMessageConverters().clear();
        restTemplate.getMessageConverters().add(new MappingJacksonHttpMessageConverter());
        restTemplate.getMessageConverters().add(new StringHttpMessageConverter());
        restTemplate.getMessageConverters().add(new MyFormHttpMessageConverter());
        restTemplate.getMessageConverters().add(new MyStringHttpMessageConverter());
        restTemplate.getMessageConverters().add(new ResourceHttpMessageConverter());
        restTemplate.getMessageConverters().add(new FormHttpMessageConverter());
        restTemplate.getMessageConverters().add(new ByteArrayHttpMessageConverter());
        restTemplate.setInterceptors(new ArrayList<ClientHttpRequestInterceptor>());
        restTemplate.getInterceptors().add(HttpBasicAuthenticatorInterceptor_.getInstance_(context));
    }

    @Override
    public void setHttpBasicAuth(String arg0, String arg1) {
        this.authentication = new HttpBasicAuthentication(arg0, arg1);
    }

    @Override
    public void setBearerAuth(final String arg0) {
        this.authentication = new HttpAuthentication() {


            @Override
            public String getHeaderValue() {
                return ("Bearer "+ arg0);
            }

        }
        ;
    }

    @Override
    public void setAuthentication(HttpAuthentication arg0) {
        this.authentication = arg0;
    }

    @Override
    public String getCookie(String arg0) {
        return availableCookies.get(arg0);
    }

    @Override
    public String getHeader(String arg0) {
        return availableHeaders.get(arg0);
    }

    @Override
    public void setCookie(String arg0, String arg1) {
        availableCookies.put(arg0, arg1);
    }

    @Override
    public void setHeader(String arg0, String arg1) {
        availableHeaders.put(arg0, arg1);
    }

    @Override
    public ApiResponse getMemoSubs(int userID) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("userID", userID);
            return restTemplate.exchange(rootUrl.concat("/getMemoSubs?userID={userID}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse getEditSubs(int userID, int type, int locationType) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("locationType", locationType);
            urlVariables.put("type", type);
            urlVariables.put("userID", userID);
            return restTemplate.exchange(rootUrl.concat("/getEditSubs?userID={userID}&type={type}&locationType={locationType}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse stationList() {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/stationList"), HttpMethod.GET, requestEntity, ApiResponse.class).getBody();
        }
    }

    @Override
    public ApiResponse getUserInfo() {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/getuserinfo"), HttpMethod.GET, requestEntity, ApiResponse.class).getBody();
        }
    }

    @Override
    public ApiResponse Group(String substation_id) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("substation_id", substation_id);
            return restTemplate.exchange(rootUrl.concat("/Group?substation_id={substation_id}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse getMessage(String msgType) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("msgType", msgType);
            return restTemplate.exchange(rootUrl.concat("/getmessage?msgtype={msgType}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse GetActiveLocas(int locationType, int locationID, int type) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("locationID", locationID);
            urlVariables.put("locationType", locationType);
            urlVariables.put("type", type);
            return restTemplate.exchange(rootUrl.concat("/GetActiveLocas?locationType={locationType}&locationID={locationID}&type={type}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse GetQuestion(int type, int topicID) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("topicID", topicID);
            urlVariables.put("type", type);
            return restTemplate.exchange(rootUrl.concat("/GetQuestion?type={type}&topicID={topicID}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse deleteStation(String station_id) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("station_id", station_id);
            return restTemplate.exchange(rootUrl.concat("/deleteStation?station_id={station_id}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse VideoRecord(String data_id, String start_date, String end_start) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("data_id", data_id);
            urlVariables.put("end_start", end_start);
            urlVariables.put("start_date", start_date);
            return restTemplate.exchange(rootUrl.concat("/VideoRecord?data_id={data_id}&start_date={start_date}&end_start={end_start}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse GetApplyInfo(int type, int locID) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("type", type);
            urlVariables.put("locID", locID);
            return restTemplate.exchange(rootUrl.concat("/GetApplyInfo?type={type}&locID={locID}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public String getLatestAlarmId() {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/getLatestAlarmId"), HttpMethod.GET, requestEntity, String.class).getBody();
        }
    }

    @Override
    public ApiResponse getAlarmList(String citycode, String countycode, String substationId, String roomId, String level, String model, String signalName, String startdatetime, String enddatetime, String offset, String count, String lastId) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("signalName", signalName);
            urlVariables.put("citycode", citycode);
            urlVariables.put("countycode", countycode);
            urlVariables.put("offset", offset);
            urlVariables.put("level", level);
            urlVariables.put("enddatetime", enddatetime);
            urlVariables.put("count", count);
            urlVariables.put("lastId", lastId);
            urlVariables.put("model", model);
            urlVariables.put("roomId", roomId);
            urlVariables.put("substationId", substationId);
            urlVariables.put("startdatetime", startdatetime);
            return restTemplate.exchange(rootUrl.concat("/getAlarmList?citycode={citycode}&countycode={countycode}&substationId={substationId}&roomId={roomId}&level={level}&model={model}&signalName={signalName}&startdatetime={startdatetime}&enddatetime={enddatetime}&offset={offset}&count={count}&lastId={lastId}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse getPreAlarmList(String citycode, String countycode, String substationId, String roomId, String level, String model, String signalName, String startdatetime, String enddatetime, String offset, String count, String lastId) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("signalName", signalName);
            urlVariables.put("citycode", citycode);
            urlVariables.put("countycode", countycode);
            urlVariables.put("offset", offset);
            urlVariables.put("level", level);
            urlVariables.put("enddatetime", enddatetime);
            urlVariables.put("count", count);
            urlVariables.put("lastId", lastId);
            urlVariables.put("model", model);
            urlVariables.put("roomId", roomId);
            urlVariables.put("substationId", substationId);
            urlVariables.put("startdatetime", startdatetime);
            return restTemplate.exchange(rootUrl.concat("/getPreAlarmList?citycode={citycode}&countycode={countycode}&substationId={substationId}&roomId={roomId}&level={level}&model={model}&signalName={signalName}&startdatetime={startdatetime}&enddatetime={enddatetime}&offset={offset}&count={count}&lastId={lastId}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse getMobileAuth() {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/getMobileAuth"), HttpMethod.GET, requestEntity, ApiResponse.class).getBody();
        }
    }

    @Override
    public ApiResponse getLocations(int type, int id) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("id", id);
            urlVariables.put("type", type);
            return restTemplate.exchange(rootUrl.concat("/getLocations?type={type}&id={id}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse GetAppliedLocation(int checkType, int applyType, int userID) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("checkType", checkType);
            urlVariables.put("applyType", applyType);
            urlVariables.put("userID", userID);
            return restTemplate.exchange(rootUrl.concat("/GetAppliedLocation?checkType={checkType}&applyType={applyType}&userID={userID}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse getSignalNamelData() {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/getSignalNamelData"), HttpMethod.GET, requestEntity, ApiResponse.class).getBody();
        }
    }

    @Override
    public ApiResponse GetAppliedLocation(int checkType, int applyType, int userID, int subID, int roomID) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("checkType", checkType);
            urlVariables.put("applyType", applyType);
            urlVariables.put("subID", subID);
            urlVariables.put("userID", userID);
            urlVariables.put("roomID", roomID);
            return restTemplate.exchange(rootUrl.concat("/GetAppliedLocation?checkType={checkType}&applyType={applyType}&userID={userID}&subID={subID}&roomID={roomID}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse getLocations(int type) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("type", type);
            return restTemplate.exchange(rootUrl.concat("/getLocations?type={type}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse getDevModelData() {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/getDevModelData"), HttpMethod.GET, requestEntity, ApiResponse.class).getBody();
        }
    }

    @Override
    public JsonResponse changepasswd(String txtPasswdold, String txtPasswdnew, String txtPasswdagain) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("txtPasswdnew", txtPasswdnew);
            urlVariables.put("txtPasswdagain", txtPasswdagain);
            urlVariables.put("txtPasswdold", txtPasswdold);
            return restTemplate.exchange(rootUrl.concat("/ChangePasswd?txtPasswdold={txtPasswdold}&txtPasswdnew={txtPasswdnew}&txtPasswdagain={txtPasswdagain}"), HttpMethod.GET, requestEntity, JsonResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse newGrouping(String GroupingName, String substation_id) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("GroupingName", GroupingName);
            urlVariables.put("substation_id", substation_id);
            return restTemplate.exchange(rootUrl.concat("/newGrouping?GroupingName={GroupingName}&substation_id={substation_id}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse getMemos(int userID, int subID) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("subID", subID);
            urlVariables.put("userID", userID);
            return restTemplate.exchange(rootUrl.concat("/getMemos?userID={userID}&subID={subID}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse GetCheckLocation(int type, int id, int apply) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("apply", apply);
            urlVariables.put("id", id);
            urlVariables.put("type", type);
            return restTemplate.exchange(rootUrl.concat("/GetCheckLocation?type={type}&id={id}&apply={apply}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse getArrangeSubs(int userID) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("userID", userID);
            return restTemplate.exchange(rootUrl.concat("/getArrangeSubs?userID={userID}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public SPDevResponse get_spdev_list() {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/get_spdev_list"), HttpMethod.GET, requestEntity, SPDevResponse.class).getBody();
        }
    }

    @Override
    public ApiResponse getAlarmChartsData() {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/getAlarmChartsData"), HttpMethod.GET, requestEntity, ApiResponse.class).getBody();
        }
    }

    @Override
    public ApiResponse getSubstationList(String name, int offset) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("offset", offset);
            urlVariables.put("name", name);
            return restTemplate.exchange(rootUrl.concat("/getSubstationList?name={name}&offset={offset}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponseImage stationListImage() {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/stationList"), HttpMethod.GET, requestEntity, ApiResponseImage.class).getBody();
        }
    }

    @Override
    public ApiResponse getAreaData(String cityName, String stationName, String stationNames) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("cityName", cityName);
            urlVariables.put("stationNames", stationNames);
            urlVariables.put("stationName", stationName);
            return restTemplate.exchange(rootUrl.concat("/getAreaData?cityName={cityName}&stationName={stationName}&stationNames={stationNames}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse GetCheckLocation(int type, int id) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("id", id);
            urlVariables.put("type", type);
            return restTemplate.exchange(rootUrl.concat("/GetCheckLocation?type={type}&id={id}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponseUrl GetCameraUrl(String data_id) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("data_id", data_id);
            return restTemplate.exchange(rootUrl.concat("/GetCameraUrl?data_id={data_id}"), HttpMethod.GET, requestEntity, ApiResponseUrl.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse getEditQuestions(int type, int id) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("id", id);
            urlVariables.put("type", type);
            return restTemplate.exchange(rootUrl.concat("/getEditQuestions?type={type}&id={id}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse GetDoorStatus(String data_id) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("data_id", data_id);
            return restTemplate.exchange(rootUrl.concat("/get_door_status?data_id={data_id}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse getRoomDeviceList(String roomcode, String devtype) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("devtype", devtype);
            urlVariables.put("roomcode", roomcode);
            return restTemplate.exchange(rootUrl.concat("/getRoomDeviceList?roomcode={roomcode}&devtype={devtype}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse GetLocation(int type, int id, int locationType) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            HashMap<String, Object> urlVariables = new HashMap<String, Object>();
            urlVariables.put("locationType", locationType);
            urlVariables.put("id", id);
            urlVariables.put("type", type);
            return restTemplate.exchange(rootUrl.concat("/GetLocation?type={type}&id={id}&locationType={locationType}"), HttpMethod.GET, requestEntity, ApiResponse.class, urlVariables).getBody();
        }
    }

    @Override
    public ApiResponse getDevCategoryData() {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/getDevCategoryData"), HttpMethod.GET, requestEntity, ApiResponse.class).getBody();
        }
    }

    @Override
    public Update getUpdateInfo() {
        return restTemplate.exchange("http://yj.jimglobal.com/app/checkupdate", HttpMethod.GET, null, Update.class).getBody();
    }

    @Override
    public ApiResponse postPreAlarmList(LinkedHashMap<String, String> lastd) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<LinkedHashMap<String, String>> requestEntity = new HttpEntity<LinkedHashMap<String, String>>(lastd, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/postPreAlarmList"), HttpMethod.POST, requestEntity, ApiResponse.class).getBody();
        }
    }

    @Override
    public ApiResponseUpLoad teamUpload(MultiValueMap<String, Object> multiValueMap) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            httpHeaders.set("Content-Type", availableHeaders.get("Content-Type"));
            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<MultiValueMap<String, Object>>(multiValueMap, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/teamUpload"), HttpMethod.POST, requestEntity, ApiResponseUpLoad.class).getBody();
        }
    }

    @Override
    public ApiResponseUpLoad uploadMemo(MultiValueMap<String, Object> multiValueMap) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            httpHeaders.set("Content-Type", availableHeaders.get("Content-Type"));
            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<MultiValueMap<String, Object>>(multiValueMap, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/uploadMemo"), HttpMethod.POST, requestEntity, ApiResponseUpLoad.class).getBody();
        }
    }

    @Override
    public ApiResponse modifyuserimage(MultiValueMap<String, Object> multiValueMap) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            httpHeaders.set("Content-Type", availableHeaders.get("Content-Type"));
            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<MultiValueMap<String, Object>>(multiValueMap, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/modifyuserimage"), HttpMethod.POST, requestEntity, ApiResponse.class).getBody();
        }
    }

    @Override
    public ApiResponseUpLoad checkTeamImgs(MultiValueMap<String, Object> multiValueMap) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            httpHeaders.set("Content-Type", availableHeaders.get("Content-Type"));
            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<MultiValueMap<String, Object>>(multiValueMap, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/checkTeamImgs"), HttpMethod.POST, requestEntity, ApiResponseUpLoad.class).getBody();
        }
    }

    @Override
    public ApiResponse addFeedback(LinkedHashMap<String, String> items) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<LinkedHashMap<String, String>> requestEntity = new HttpEntity<LinkedHashMap<String, String>>(items, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/addfeedback"), HttpMethod.POST, requestEntity, ApiResponse.class).getBody();
        }
    }

    @Override
    public ApiResponse creationUser(LinkedHashMap<String, String> items) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<LinkedHashMap<String, String>> requestEntity = new HttpEntity<LinkedHashMap<String, String>>(items, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/creationUser"), HttpMethod.POST, requestEntity, ApiResponse.class).getBody();
        }
    }

    @Override
    public ApiResponseUpLoad StationImage(MultiValueMap<String, Object> multiValueMap) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            httpHeaders.set("Content-Type", availableHeaders.get("Content-Type"));
            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<MultiValueMap<String, Object>>(multiValueMap, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/StationImage"), HttpMethod.POST, requestEntity, ApiResponseUpLoad.class).getBody();
        }
    }

    @Override
    public ApiResponse modifyUserInfo(LinkedHashMap<String, String> items) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<LinkedHashMap<String, String>> requestEntity = new HttpEntity<LinkedHashMap<String, String>>(items, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/modifyuserinfo"), HttpMethod.POST, requestEntity, ApiResponse.class).getBody();
        }
    }

    @Override
    public ApiResponseUpLoad CheckUpload(MultiValueMap<String, Object> multiValueMap) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            httpHeaders.set("Content-Type", availableHeaders.get("Content-Type"));
            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<MultiValueMap<String, Object>>(multiValueMap, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/CheckUpload"), HttpMethod.POST, requestEntity, ApiResponseUpLoad.class).getBody();
        }
    }

    @Override
    public ApiResponseUpLoad editQuestion(MultiValueMap<String, Object> multiValueMap) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            httpHeaders.set("Content-Type", availableHeaders.get("Content-Type"));
            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<MultiValueMap<String, Object>>(multiValueMap, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/editQuestion"), HttpMethod.POST, requestEntity, ApiResponseUpLoad.class).getBody();
        }
    }

    @Override
    public ApiResponseUpLoad updateMemo(MultiValueMap<String, Object> multiValueMap) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            httpHeaders.set("Content-Type", availableHeaders.get("Content-Type"));
            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<MultiValueMap<String, Object>>(multiValueMap, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/updateMemo"), HttpMethod.POST, requestEntity, ApiResponseUpLoad.class).getBody();
        }
    }

    @Override
    public ApiResponseUpLoad SaveUserWork(MultiValueMap<String, Object> multiValueMap) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            httpHeaders.set("Content-Type", availableHeaders.get("Content-Type"));
            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<MultiValueMap<String, Object>>(multiValueMap, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/SaveUserWork"), HttpMethod.POST, requestEntity, ApiResponseUpLoad.class).getBody();
        }
    }

    @Override
    public ApiResponse OpenDoor(DoorOperation op) {
        {
            HttpHeaders httpHeaders = new HttpHeaders();
            httpHeaders.set("Authorization", availableHeaders.get("Authorization"));
            HttpEntity<DoorOperation> requestEntity = new HttpEntity<DoorOperation>(op, httpHeaders);
            return restTemplate.exchange(rootUrl.concat("/open_door"), HttpMethod.POST, requestEntity, ApiResponse.class).getBody();
        }
    }

}
